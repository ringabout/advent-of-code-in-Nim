# ---第1天：火箭汽油计算方程式---
# - - 第一部分 - -
# 圣诞老人在向其他星球运送礼物的同时也陷入了太阳系的边缘！为了准确地计算出自己的空间位置，安全对准他的曲速，并及时保存圣诞节返回地球，他需要你给他带来的测量从五十颗星。

# 通过解决难题来收集星星。降临日程中的每一天都会有两个难题。完成第一个拼图后，第二个拼图便会解锁。每个谜题都授予一颗星。祝好运！

# 精灵迅速将您装载到航天器中并准备发射。

# 在第一次“通过/不通过”民意测验中，每一个精灵都是“ Go”，直到“ Fuel Counter-Upper”。他们还没有确定所需的燃料量。

# 启动给定模块所需的燃料基于其质量。具体来说，要查找模块所需的燃料，请取其质量，除以三，向下取整并减去2。

# 例如：

# 对于质量12，除以3并向下取整得到4，然后减去2得到2。
# 对于质量14乘以3并向下取整仍然产生了产量4，因此所需的燃料也是2。
# 对于大量1969燃料，所需燃料为654。
# 对于大量100756燃料，所需燃料为33583。
# 加油计数器需要知道总的燃油需求。要找到它，请分别计算每个模块的质量所需的燃料（您的难题输入），然后将所有燃料值相加。

# 您航天器上所有模块的燃料需求总和是多少？

# - - 第二部分 - -
# 在第二次“通过/不通过”民意测验中，负责火箭方程式双重检查的精灵停止了发射程序。显然，您忘记为刚刚添加的燃料添加其他燃料。

# 燃料本身就像模块一样需要燃料-将其质量除以三，向下取整并减去2。但是，该燃料也需要燃料，而该燃料则需要燃料，依此类推。任何需要负燃料的质量都应该被视为零燃料 ; 剩余的质量（如果有的话）是通过真正地希望来实现的，它没有质量并且不在此计算范围之内。

# 因此，对于每个模块质量，计算其燃料并将其添加到总计中。然后，将刚刚计算出的燃油量视为输入质量，并重复该过程，直到燃油需求为零或负。例如：

# 质量模块14需要2燃料。该燃料不需要其他燃料（2除以3，向下取整为0，这将要求是负燃料），因此所需的总燃料仍然仅为2。
# 首先，质量模块1969需要654燃料。然后，这种燃料需要216更多的燃料（654 / 3 - 2）。 216则需要70更多的燃料，这需要21燃料，这需要5燃料，而这不需要其他燃料。因此，一个质量模块所需的总燃料1969为654 + 216 + 70 + 21 + 5 = 966。
# 质量模块100756及其燃料所需的燃料为：33583 + 11192 + 3728 + 1240 + 411 + 135 + 43 + 12 + 2 = 50346。
# 当还考虑添加燃料的质量时，航天器上所有模块的燃料需求总和是多少？（分别计算每个模块的燃料需求，然后将它们加起来。）

import math, strutils


block:
  proc getFuel(mass: int): int =
    int(mass / 3) - 2

  doAssert getFuel(12) == 2
  doAssert getFuel(14) == 2
  doAssert getFuel(1969) == 654
  doAssert getFuel(100756) == 33583

  var 
    line: string
    sum: int
    f = open("input.txt", fmRead)
  while readLine(f, line):
    let num = parseInt(line)
    sum += getFuel(num)
  echo sum


block:
  proc getFuel(mass: int): int =
    int(mass / 3) - 2

  proc getAllFuel(mass: int): int =
    var fuel = getFuel(mass)
    while fuel > 0:
      result += fuel
      fuel = getFuel(fuel)

  doAssert getAllFuel(12) == 2
  doAssert getAllFuel(14) == 2
  doAssert getAllFuel(1969) == 966
  doAssert getAllFuel(100756) == 50346

  var 
    line: string
    sum: int
    f = open("input.txt", fmRead)
  while readLine(f, line):
    let num = parseInt(line)
    sum += getAllFuel(num)
  echo sum
